// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  email     String  @unique
  password  String?
  name      String?
  avatarUrl String?
  isAdmin   Boolean @default(false) // Add this field for admin
  provider  String  @default("email") // "email", "github", etc.
  status    String? @default("offline") // "online", "offline", "away"

  bio                     String?
  jobTitle                String?
  githubId                String?                  @unique
  githubUsername          String?                  @unique
  githubToken             String?
  githubRefreshToken      String?
  onboardingProgress      Json?                    @default("{}")
  onboardingCompleted     Boolean                  @default(false)
  workspaceSettings       Json?                    @default("{}")
  role                    String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  emailVerified           Boolean                  @default(false)
  verificationToken       String?
  verificationTokenExpiry DateTime?
  // Relations
  teams                   UserTeam[]
  standups                Standup[]
  pairSessions            PairSessionParticipant[]
  pullRequests            PullRequest[]
  focusTimes              FocusTime[]
  subscription            Subscription?            @relation(fields: [subscriptionId], references: [id])
  organizations           OrganizationMember[]
  subscriptionId          String?
  PullRequestComment      PullRequestComment[]
  PullRequestReviewer     PullRequestReviewer[]
}

model Team {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members        UserTeam[]
  pairSessions   PairProgrammingSession[]
  pullRequests   PullRequest[]
  standups       Standup[]
  TeamInvitation TeamInvitation[]
  Organization   Organization?            @relation(fields: [organizationId], references: [id])
  organizationId String?
}

model UserTeam {
  id        String   @id @default(uuid())
  userId    String
  teamId    String
  role      String   @default("member") // "admin", "member"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

model Standup {
  id        String   @id @default(uuid())
  userId    String
  teamId    String
  yesterday String?
  today     String?
  blockers  String?
  audioUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  tags Tag[]
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  standups Standup[]
}

model PairProgrammingSession {
  id           String    @id @default(uuid())
  title        String
  description  String?
  teamId       String
  status       String    @default("SCHEDULED") // "SCHEDULED", "ACTIVE", "COMPLETED"
  startTime    DateTime
  endTime      DateTime?
  recordingUrl String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  team         Team                     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  participants PairSessionParticipant[]
}

model TeamInvitation {
  id        String   @id @default(uuid())
  email     String
  teamId    String
  status    String   @default("PENDING") // "PENDING", "ACCEPTED", "DECLINED"
  role      String   @default("MEMBER") // "ADMIN", "MEMBER", "MANAGER"
  invitedBy String // User ID who sent the invitation
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model PairSessionParticipant {
  id        String   @id @default(uuid())
  sessionId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  session PairProgrammingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionId, userId])
}

model FocusTime {
  id        String   @id @default(uuid())
  userId    String
  date      DateTime @default(now())
  minutes   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id                    String    @id @default(uuid())
  name                  String
  description           String?
  logo                  String?
  website               String?
  isActive              Boolean   @default(true)
  isApproved            Boolean   @default(false)
  approvedAt            DateTime?
  approvedBy            String?
  subscriptionTier      String    @default("FREE") // "FREE", "BASIC", "PREMIUM", "ENTERPRISE"
  subscriptionStatus    String    @default("ACTIVE") // "ACTIVE", "INACTIVE", "PENDING", "CANCELLED"
  subscriptionStartDate DateTime?
  subscriptionEndDate   DateTime?
  maxUsers              Int       @default(5)
  maxTeams              Int       @default(2)
  maxProjects           Int       @default(10)
  contactEmail          String?
  contactPhone          String?
  address               String?
  city                  String?
  state                 String?
  country               String?
  postalCode            String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  members OrganizationMember[]
  teams   Team[]
}

model OrganizationMember {
  id             String   @id @default(uuid())
  role           String // "ADMIN", "LEAD", "MEMBER"
  userId         String
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

// Add this model for admin activity logging
model AdminActivityLog {
  id         String   @id @default(uuid())
  action     String // "CREATE", "UPDATE", "DELETE", "APPROVE", "REJECT", etc.
  entityType String // "ORGANIZATION", "USER", "TEAM", etc.
  entityId   String // ID of the entity being acted upon
  adminId    String // ID of the admin who performed the action
  details    String? // JSON string with additional details
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
}

// Add this model for subscription billing
model Subscription {
  id               String    @id @default(uuid())
  organizationId   String    @unique
  tier             String // "FREE", "BASIC", "PREMIUM", "ENTERPRISE"
  status           String // "ACTIVE", "INACTIVE", "PENDING", "CANCELLED"
  startDate        DateTime
  endDate          DateTime?
  billingCycle     String // "MONTHLY", "ANNUAL"
  amount           Float
  currency         String    @default("USD")
  paymentMethod    String?
  paymentReference String?
  lastBillingDate  DateTime?
  nextBillingDate  DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  User             User[]
}

// Add these models to your existing schema.prisma file

model PullRequest {
  id            String   @id @default(uuid())
  title         String
  description   String?
  status        String
  repositoryUrl String?
  prNumber      Int?
  commitsCount  Int      @default(0)
  filesChanged  Int      @default(0)
  createdBy     String
  teamId        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user      User                  @relation(fields: [createdBy], references: [id])
  team      Team?                 @relation(fields: [teamId], references: [id])
  comments  PullRequestComment[]
  reviewers PullRequestReviewer[]
}

model PullRequestComment {
  id            String   @id @default(uuid())
  content       String
  pullRequestId String
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  pullRequest PullRequest @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id])
}

model PullRequestReviewer {
  id            String   @id @default(uuid())
  pullRequestId String
  userId        String
  createdAt     DateTime @default(now())

  // Relations
  pullRequest PullRequest @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id])

  @@unique([pullRequestId, userId])
}
