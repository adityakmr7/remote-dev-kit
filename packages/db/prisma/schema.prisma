// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String?
  name      String?
  avatarUrl String?
  provider  String   @default("email") // "email", "github", etc.
  status    String?  @default("offline") // "online", "offline", "away"
  role      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  teams        UserTeam[]
  standups     Standup[]
  pairSessions PairSessionParticipant[]
  pullRequests PullRequest[]
  focusTimes   FocusTime[]
  subscription Subscription?
}

model Team {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members      UserTeam[]
  pairSessions PairProgrammingSession[]
  pullRequests PullRequest[]
  standups     Standup[]
}

model UserTeam {
  id        String   @id @default(uuid())
  userId    String
  teamId    String
  role      String   @default("member") // "admin", "member"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

model Standup {
  id        String   @id @default(uuid())
  userId    String
  teamId    String
  yesterday String?
  today     String?
  blockers  String?
  audioUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  tags Tag[]
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  standups Standup[]
}

model PairProgrammingSession {
  id           String    @id @default(uuid())
  title        String
  description  String?
  teamId       String
  status       String    @default("SCHEDULED") // "SCHEDULED", "ACTIVE", "COMPLETED"
  startTime    DateTime
  endTime      DateTime?
  recordingUrl String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  team         Team                     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  participants PairSessionParticipant[]
}

model PairSessionParticipant {
  id        String   @id @default(uuid())
  sessionId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  session PairProgrammingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionId, userId])
}

model PullRequest {
  id          String   @id @default(uuid())
  title       String
  description String?
  number      Int
  url         String
  status      String   @default("OPEN") // "OPEN", "NEEDS_REVIEW", "CHANGES_REQUESTED", "READY_TO_MERGE", "MERGED", "CLOSED"
  userId      String
  teamId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model FocusTime {
  id        String   @id @default(uuid())
  userId    String
  date      DateTime @default(now())
  minutes   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id        String    @id @default(uuid())
  userId    String    @unique
  plan      String    @default("FREE") // "FREE", "PRO", "TEAM"
  status    String    @default("ACTIVE") // "ACTIVE", "CANCELED", "PAST_DUE"
  startDate DateTime  @default(now())
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
