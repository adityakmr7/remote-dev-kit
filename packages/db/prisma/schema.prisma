// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  github
  email
}

enum SubscriptionTier {
  FREE
  PRO
  ENTERPRISE
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  password      String? // null for GitHub users
  avatarUrl     String?
  provider      Provider
  createdAt     DateTime       @default(now())
  teams         TeamMember[]
  standups      Standup[]
  focusSessions FocusSession[]
  codeReviews   CodeReview[]
  subscription  Subscription?
}

model Team {
  id           String       @id @default(cuid())
  name         String
  createdAt    DateTime     @default(now())
  members      TeamMember[]
  standups     Standup[]
  repositories Repository[]
}

enum Role {
  OWNER
  MEMBER
  ADMIN
}

model TeamMember {
  id        String   @id @default(cuid())
  userId    String
  teamId    String
  role      Role     @default(OWNER)
  user      User     @relation(fields: [userId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, teamId])
}

model Standup {
  id        String   @id @default(cuid())
  userId    String
  teamId    String
  content   String
  user      User     @relation(fields: [userId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])
  createdAt DateTime @default(now())
}

model FocusSession {
  id        String    @id @default(cuid())
  userId    String
  startTime DateTime
  endTime   DateTime?
  duration  Int // in minutes
  user      User      @relation(fields: [userId], references: [id])
}

model CodeReview {
  id        String   @id @default(cuid())
  userId    String
  prUrl     String
  status    String // PENDING, IN_PROGRESS, COMPLETED
  comments  Json
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Repository {
  id        String   @id @default(cuid())
  teamId    String
  url       String
  name      String
  team      Team     @relation(fields: [teamId], references: [id])
  createdAt DateTime @default(now())
}

model Subscription {
  id        String           @id @default(cuid())
  userId    String           @unique
  tier      SubscriptionTier
  startDate DateTime
  endDate   DateTime?
  user      User             @relation(fields: [userId], references: [id])
}
